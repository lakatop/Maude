load bank.maude .

fmod ATM is
	protecting NAT .
	protecting BANK .
	sorts ATMBalance AtmNumber .
	subsort Nat < ATMBalance .
	sort Atm .
	sorts M100 M200 M500 M1000 M2000 .
	sort Money .
	subsort Nat < Money .
	subsort Nat < M100 M200 M500 M1000 M2000 .
	subsort Nat < AtmNumber .

	var cardBalance : Nat .
	var bankName bankName3 : BankName .
	var c : Card .
	vars m100 m100_2 : M100 .
	vars m200 m200_2 : M200 .
	vars m500 m500_2 : M500 .
	vars m1000 m1000_2 : M1000 .
	vars m2000 m2000_2 : M2000 .
	var atmNum : AtmNumber .
	var cardNum : CardNum .
	var cardPin cardPinIn : CardPin .
	var balance : Balance .
	var banksL : Banks .
	var atm1 : Atm .
	var atmb : ATMBalance .

	op atmbalance : M100 M200 M500 M1000 M2000 -> ATMBalance .
	op atm : AtmNumber Banks ATMBalance -> Atm .
	
	op balAtm : Balance Atm -> Balance .
	eq balAtm(balance, atm1) = balance .

	--- state for how many 100czk banknotes atm has left
	op getATMBalance100 : Atm -> M100 .
	eq getATMBalance100(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) = m100 .

	--- state for how many 200czk banknotes atm has left
	op getATMBalance200 : Atm -> M200 .
	eq getATMBalance200(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) = m200 .

	--- state for how many 500czk banknotes atm has left
	op getATMBalance500 : Atm -> M500 .
	eq getATMBalance500(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) = m500 .

	--- state for how many 1000czk banknotes atm has left
	op getATMBalance1000 : Atm -> M1000 .
	eq getATMBalance1000(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) = m1000 .

	--- state for how many 2000czk banknotes atm has left
	op getATMBalance2000 : Atm -> M2000 .
	eq getATMBalance2000(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) = m2000 .

	--- operation to get atm balance
	op getATMBalance : Atm -> Nat .
	eq getATMBalance(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000))) =  m100 + m200 + m500 + m1000 + m2000 .

	op money : M100 M200 M500 M1000 M2000 -> Money .
	--- operation to insert money into atm
	op insertMoney : Atm Money -> Atm . 
	eq insertMoney(atm(atmNum, banksL, atmbalance(m100, m200, m500, m1000, m2000)), money(m100_2, m200_2, m500_2, m1000_2, m2000_2)) = 
		atm(atmNum, banksL, atmbalance(
			m100 + m100_2, 
			m200 + m200_2, 
			m500 + m500_2, 
			m1000 + m1000_2, 
			m2000 + m2000_2)) .

	--- get money balance and withdraw that amount from atm
	op getMoneyBalanceAndWithdraw : Money Atm -> Balance .
	eq getMoneyBalanceAndWithdraw(money(m100, m200, m500, m1000, m2000), atm(atmNum, banksL, atmbalance(m100_2, m200_2, m500_2, m1000_2, m2000_2))) =
		if m100 <= m100_2 and m200 <= m200_2 and m500 <= m500_2 and m1000 <= m1000_2 and m2000 <= m2000_2
			then balAtm((m100 * 100) + (m200 * 200) + (m500 * 500) + (m1000 * 1000) + (m2000 * 2000), 
			atm(atmNum, banksL, atmbalance(m100_2 - m100, m200_2 - m200, m500_2 - m500, m1000_2 - m1000, m2000_2 - m2000)))
		else
			nilBalance
		fi .

	--- get money balance and deposit that amount to atm
	op getMoneyBalanceAndDeposit : Money Atm -> Balance .
	eq getMoneyBalanceAndDeposit(money(m100, m200, m500, m1000, m2000), atm(atmNum, banksL, atmbalance(m100_2, m200_2, m500_2, m1000_2, m2000_2))) =
		balAtm((m100 * 100) + (m200 * 200) + (m500 * 500) + (m1000 * 1000) + (m2000 * 2000), 
			   atm(atmNum, banksL, atmbalance(m100 + m100_2, m200 + m200_2, m500 + m500_2, m1000 + m1000_2, m2000 + m2000_2))) .

	--- withdraw operation used by customer
	op withdraw : Money Card CardPin Atm -> Status .
	eq withdraw(money(m100, m200, m500, m1000, m2000), card(cardNum, cardPin, balance, bankName3), cardPinIn, 
				atm(atmNum, banksL, atmb)) =
	withdraw(getAccount(card(cardNum, cardPin, balance, bankName3), 
			    		getBankAccounts(getBank(bankName3, banksL), banksL)), 
			cardPinIn, 
			getMoneyBalanceAndWithdraw(money(m100, m200, m500, m1000, m2000), atm(atmNum, banksL, atmb))) .


	--- deposit operation used by customer
	op deposit : Money Card CardPin Atm -> Status .
	eq deposit(money(m100, m200, m500, m1000, m2000), card(cardNum, cardPin, balance, bankName3), cardPinIn, 
				atm(atmNum, banksL, atmb)) =
		deposit(getAccount(card(cardNum, cardPin, balance, bankName3), 
			    		getBankAccounts(getBank(bankName3, banksL), banksL)),
				cardPinIn,
				getMoneyBalanceAndDeposit(money(m100, m200, m500, m1000, m2000), atm(atmNum, banksL, atmb))) .

	--- operation used by customer to retrieve information about himself
	op getAccountInfo : Card CardPin Atm -> Account .
	eq getAccountInfo(card(cardNum, cardPin, balance, bankName3), cardPinIn, atm(atmNum, banksL, atmb)) =
		if cardPinIn == cardPin
			then getAccount(card(cardNum, cardPin, balance, bankName3), 
			    		getBankAccounts(getBank(bankName3, banksL), banksL))
			else nilAccount
		fi .

	--- operation used by customer to check his card balance
	op checkAccountBalance : Card CardPin Atm -> Balance .
	eq checkAccountBalance(card(cardNum, cardPin, balance, bankName3), cardPinIn, atm(atmNum, banksL, atmb)) =
		if cardPinIn == cardPin
			then getAccBalance(getAccount(card(cardNum, cardPin, balance, bankName3), 
			    			  			  getBankAccounts(getBank(bankName3, banksL), banksL)))
			else nilBalance
		fi .

endfm
